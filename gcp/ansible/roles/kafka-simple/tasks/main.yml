---
- name: Pull Kafka image
  shell: docker pull confluentinc/cp-kafka:latest

- name: Stop existing Kafka container if running
  shell: docker stop kafka || true

- name: Remove existing Kafka container if exists
  shell: docker rm kafka || true

- name: Start Kafka container
  shell: |
    docker run -d \
      --name kafka \
      -p {{ kafka_port }}:{{ kafka_port }} \
      -p {{ kafka_external_port }}:{{ kafka_external_port }} \
      -e KAFKA_BROKER_ID=1 \
      -e KAFKA_ZOOKEEPER_CONNECT={{ hostvars[groups['zookeeper'][0]]['internal_ip'] }}:{{ zookeeper_port }} \
      -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://{{ internal_ip }}:{{ kafka_port }},PLAINTEXT_HOST://{{ ansible_host }}:{{ kafka_external_port }} \
      -e KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT \
      -e KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT \
      -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
      -e KAFKA_LOG_RETENTION_HOURS=168 \
      -e KAFKA_LOG_SEGMENT_BYTES=1073741824 \
      -e KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS=300000 \
      -e KAFKA_LOG4J_ROOT_LOGLEVEL=WARN \
      -e KAFKA_LOG4J_LOGGERS="kafka=WARN,kafka.controller=WARN,kafka.log.LogCleaner=WARN,state.change.logger=WARN,kafka.producer.async.DefaultEventHandler=WARN" \
      --restart unless-stopped \
      confluentinc/cp-kafka:latest

- name: Wait for Kafka to be ready
  wait_for:
    port: "{{ kafka_port }}"
    host: "{{ ansible_default_ipv4.address }}"
    delay: 20
    timeout: 120

- name: Create trip-start topic
  shell: |
    docker exec kafka kafka-topics --create \
      --topic trip-start \
      --bootstrap-server localhost:{{ kafka_port }} \
      --partitions 3 \
      --replication-factor 1
  register: create_topic_start
  failed_when: 
    - create_topic_start.rc != 0
    - "'already exists' not in create_topic_start.stderr"
  changed_when: "'Created topic' in create_topic_start.stdout"

- name: Create trip-end topic
  shell: |
    docker exec kafka kafka-topics --create \
      --topic trip-end \
      --bootstrap-server localhost:{{ kafka_port }} \
      --partitions 3 \
      --replication-factor 1
  register: create_topic_end
  failed_when: 
    - create_topic_end.rc != 0
    - "'already exists' not in create_topic_end.stderr"
  changed_when: "'Created topic' in create_topic_end.stdout"

- name: List Kafka topics
  shell: docker exec kafka kafka-topics --list --bootstrap-server localhost:{{ kafka_port }}
  register: kafka_topics
  changed_when: false

- name: Display Kafka topics
  debug:
    var: kafka_topics.stdout_lines